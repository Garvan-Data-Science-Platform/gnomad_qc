import hail as hl

from gnomad.resources import TableResource, MatrixTableResource
from gnomad.sample_qc.relatedness import get_relationship_expr
from gnomad_qc.v3.resources import CURRENT_RELEASE


def get_sample_qc_root(version: str = CURRENT_RELEASE, mt: bool = False) -> str:
    """
    Return path to sample QC root folder

    :param version: Version of sample QC path to return
    :param mt: Whether path is for a MatrixTable, default is False
    :return: Root to sample QC path
    """
    return f"gs://gnomad/sample_qc/{'mt' if mt else 'ht'}/genomes_v{version}"


def get_sample_qc(version: str = CURRENT_RELEASE, strat: str = "all") -> TableResource:
    """
    Gets sample QC annotations generated by Hail for the specified stratification:
        - bi-allelic
        - multi-allelic
        - all

    :param version: Version of sample QC path to return
    :param strat: Which stratification to return
    :return: Sample QC table
    """
    return TableResource(f"{get_sample_qc_root(version)}/sample_qc_{strat}.ht")


def _get_ancestry_pca_ht_path(
    part: str,
    version: str = CURRENT_RELEASE,
    include_unreleasable_samples: bool = False,
) -> str:
    """
    Helper function to get path to files related to ancestry PCA

    :param part: String indicating the type of PCA file to return (loadings, eigenvalues, or scores)
    :param version: Version of sample QC path to return
    :param include_unreleasable_samples: Whether the file includes PCA info for unreleasable samples
    :return: Path to requested ancestry PCA file
    """
    return "{}/gnomad_v{}_pca_{}{}.{}".format(
        get_sample_qc_root(version),
        version,
        part,
        "_with_unreleasable_samples" if include_unreleasable_samples else "",
        "txt" if part == "eigenvalues" else "ht",
    )


def ancestry_pca_loadings(
    version: str = CURRENT_RELEASE, include_unreleasable_samples: bool = False
) -> TableResource:
    """
    Gets the ancestry PCA loadings TableResource

    :param version: Version of sample QC path to return
    :param include_unreleasable_samples: Whether to get the PCA that included unreleasable in training
    :return: Ancestry PCA loadings
    """
    return TableResource(
        _get_ancestry_pca_ht_path("loadings", version, include_unreleasable_samples)
    )


def ancestry_pca_scores(
    version: str = CURRENT_RELEASE, include_unreleasable_samples: bool = False
) -> TableResource:
    """
    Gets the ancestry PCA scores TableResource

    :param version: Version of sample QC path to return
    :param include_unreleasable_samples: Whether to get the PCA that included unreleasable in training
    :return: Ancestry PCA scores
    """
    return TableResource(
        _get_ancestry_pca_ht_path("scores", version, include_unreleasable_samples)
    )


def get_relatedness_annotated_ht(version: str = CURRENT_RELEASE) -> hl.Table:
    """
    relatedness table annotated with get_relationship_expr.

    :param version: Version of sample QC path to return
    :return: Annotated relatedness table
    """
    relatedness_ht = relatedness(version).ht()
    return relatedness_ht.annotate(
        relationship=get_relationship_expr(
            kin_expr=relatedness_ht.kin,
            ibd0_expr=relatedness_ht.ibd0,
            ibd1_expr=relatedness_ht.ibd1,
            ibd2_expr=relatedness_ht.ibd2,
        )
    )


# QC Sites (gnomAD v2 QC sites, lifted over)
gnomad_v2_qc_sites = TableResource(
    "gs://gnomad-public/resources/grch38/gnomad_v2_qc_sites_b38.ht"
)


def qc(version: str = CURRENT_RELEASE) -> MatrixTableResource:
    """
    MatrixTableResource for the dense MT of v3 samples at v2 QC sites

    :param version: Version of sample QC path to return
    :return: Sample QC MatrixTableResource
    """
    return MatrixTableResource(
        f"gs://gnomad/sample_qc/mt/genomes_v{version}/gnomad_v{version}_qc_mt_v2_sites_dense.mt"
    )


def pc_relate_pca_scores(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource for PC relate PCA scores using qc MT of v2 sites

    :param version: Version of sample QC path to return
    :return: PC relate scores TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_qc_mt_v2_sites_pc_scores.ht"
    )


def relatedness(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource for PC relate relatedness results using qc MT of v2 sites

    :param version: Version of sample QC path to return
    :return: Relatedness TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_qc_mt_v2_sites_relatedness.ht"
    )


def sex(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource for sex imputation results

    :param version: Version of sample QC path to return
    :return: Sex imputation TableResource
    """
    return TableResource(f"{get_sample_qc_root(version)}/gnomad_v{version}_sex.ht")


def pca_related_samples_to_drop(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource for samples to drop for PCA due to being related

    :param version: Version of sample QC path to return
    :return: Related sample to drop TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_related_samples_to_drop_for_pca.ht"
    )


def release_related_samples_to_drop(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource for related samples to drop for release

    :param version: Version of sample QC path to return
    :return: Release samples to drop TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_related_release_samples_to_drop.ht"
    )


def pop(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource for inferred sample populations

    :param version: Version of sample QC path to return
    :return: Sample population TableResource
    """
    return TableResource(f"{get_sample_qc_root(version)}/gnomad_v{version}_pop.ht")


def pop_tsv_path(version: str = CURRENT_RELEASE) -> str:
    """
    Path to tab delimited file indicating inferred sample populations

    :param version: Version of sample QC path to return
    :return: String path to sample populations
    """
    return f"gs://gnomad/sample_qc/temp/genomes_v{version}/gnomad_v{version}_RF_pop_assignments.txt.gz"


def pop_rf_path(version: str = CURRENT_RELEASE) -> str:
    """
    Path to RF model used for inferring sample populations

    :param version: Version of sample QC path to return
    :return: String path to sample pop RF model
    """
    return f"gs://gnomad/sample_qc/temp/genomes_v{version}/gnomad_v{version}_pop.RF_fit.pickle"


def hard_filtered_samples(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource containing hard-filtered samples

    :param version: Version of sample QC path to return
    :return: Hard filtered sample TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_hard_filtered_samples.ht"
    )


def stratified_metrics(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource containing the results of running population-based metrics filtering for outliers

    .. note::

     This table was not used for v3.0 release (`regressed_metrics` Table was used instead)

    :param version: Version of sample QC path to return
    :return: Population stratified sample QC metrics TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_stratified_metrics.ht"
    )


def regressed_metrics(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource containing the results of running regression-based metrics filtering for outliers

    :param version: Version of sample QC path to return
    :return: Regressed sample QC metrics TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_regressed_metrics.ht"
    )


def pca_samples_rankings(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource with the ranking of all samples based on quality metrics.

    Used to remove related individuals for PCA.

    :param version: Version of sample QC path to return
    :return: Sample PCA ranking TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_pca_samples_ranking.ht"
    )


def release_samples_rankings(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource with the ranking of all release samples based on quality metrics.

    Used to remove related individuals for release.

    :param version: Version of sample QC path to return
    :return: Release sample PCA ranking TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_release_samples_ranking.ht"
    )


def picard_metrics(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource of the sample picard metrics to be used for hard filtering

    .. note::

        These were not used for hard-filtering of samples in v3.0

    :param version: Version of sample QC path to return
    :return: Picard metrics TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_picard_metrics.ht"
    )


def duplicates(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource indicating duplicated (or twin) samples

    :param version: Version of sample QC path to return
    :return: Duplicate sample TableResource
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_duplicates.ht"
    )


def v3_v2_pc_relate_pca_scores(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource containing PC relate scores for the sample set that overlaps with v2 samples

    :param version: Version of sample QC path to return
    :return: PC relate scores of v2 overlapping samples
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad__v2_v{version}_release_pca_scores.ht"
    )


def v3_v2_relatedness(version: str = CURRENT_RELEASE) -> TableResource:
    """
    TableResource containing relatedness information for the sample set that overlaps with v2 samples

    :param version: Version of sample QC path to return
    :return: Relatedness of v2 overlapping samples
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad__v2_v{version}_release_relatedness.ht"
    )
