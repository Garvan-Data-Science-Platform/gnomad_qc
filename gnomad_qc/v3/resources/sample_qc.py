import hail as hl

from gnomad.resources import TableResource, MatrixTableResource
from gnomad.sample_qc.relatedness import get_relationship_expr
from gnomad_qc.v3.resources import CURRENT_RELEASE


def get_sample_qc_root(version: str = CURRENT_RELEASE, mt: bool = False) -> str:
    """
    Return path to sample QC root folder

    :param version: Version of sample QC path to return
    :param mt: Whether path is for a MatrixTable, default is False
    :return: root to sample QC path
    """
    return f"gs://gnomad/sample_qc/{'mt' if mt else 'ht'}/genomes_v{version}"


def get_sample_qc(version: str = CURRENT_RELEASE, strat: str = "all") -> TableResource:
    """
    Gets sample QC annotations generated by Hail for the specified stratification:
        - bi-allelic
        - multi-allelic
        - all

    :param version: Version of sample QC path to return
    :param strat: Which stratification to return
    :return: sample QC table
    """
    return TableResource(f"{get_sample_qc_root(version)}/sample_qc_{strat}.ht")


def _get_ancestry_pca_ht_path(
    part: str,
    version: str = CURRENT_RELEASE,
    include_unreleasable_samples: bool = False,
) -> str:
    """
    
    :param part:
    :param version:
    :param include_unreleasable_samples:
    :return:
    """
    return "{}/gnomad_v{}_pca_{}{}.{}".format(
        get_sample_qc_root(version),
        version,
        part,
        "_with_unreleasable_samples" if include_unreleasable_samples else "",
        "txt" if part == "eigenvalues" else "ht",
    )


def get_ancestry_pca_loadings(
    version: str = CURRENT_RELEASE, include_unreleasable_samples: bool = False
) -> TableResource:
    """
    Gets the ancestry PCA loadings TableResource

    :param version: Version of sample QC path to return
    :param include_unreleasable_samples: Whether to get the PCA that included unreleasable in training
    :return: Ancestry PCA loadings
    """
    return TableResource(
        _get_ancestry_pca_ht_path("loadings", version, include_unreleasable_samples)
    )


def get_ancestry_pca_scores(
    version: str = CURRENT_RELEASE, include_unreleasable_samples: bool = False
) -> TableResource:
    """
    Gets the ancestry PCA scores TableResource

    :param version: Version of sample QC path to return
    :param include_unreleasable_samples: Whether to get the PCA that included unreleasable in training
    :return: Ancestry PCA scores
    """
    return TableResource(
        _get_ancestry_pca_ht_path("scores", version, include_unreleasable_samples)
    )


def get_relatedness_annotated_ht(version: str = CURRENT_RELEASE) -> hl.Table:
    """
    relatedness table annotated with get_relationship_expr.

    :param version: Version of sample QC path to return
    :return: Annotated relatedness table
    """
    relatedness_ht = relatedness(version).ht()
    return relatedness_ht.annotate(
        relationship=get_relationship_expr(
            kin_expr=relatedness_ht.kin,
            ibd0_expr=relatedness_ht.ibd0,
            ibd1_expr=relatedness_ht.ibd1,
            ibd2_expr=relatedness_ht.ibd2,
        )
    )


# QC Sites (gnomAD v2 QC sites, lifted over)
gnomad_v2_qc_sites = TableResource(
    "gs://gnomad-public/resources/grch38/gnomad_v2_qc_sites_b38.ht"
)


# Dense MT of v3 samples at QC sites
def qc(version: str = CURRENT_RELEASE) -> MatrixTableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return MatrixTableResource(
        f"gs://gnomad/sample_qc/mt/genomes_v{version}/gnomad_v{version}_qc_mt_v2_sites_dense.mt"
    )


# PC relate PCA scores
def pc_relate_pca_scores(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_qc_mt_v2_sites_pc_scores.ht"
    )


# PC relate results
def relatedness(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_qc_mt_v2_sites_relatedness.ht"
    )


# Sex imputation results
def sex(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(f"{get_sample_qc_root(version)}/gnomad_v{version}_sex.ht")


# Samples to drop for PCA due to them being related
def pca_related_samples_to_drop(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_related_samples_to_drop_for_pca.ht"
    )


# Related samples to drop for release
def release_related_samples_to_drop(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_related_release_samples_to_drop.ht"
    )


# Inferred populations
def pop(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(f"{get_sample_qc_root(version)}/gnomad_v{version}_pop.ht")


def pop_tsv_path(version: str = CURRENT_RELEASE) -> str:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return f"gs://gnomad/sample_qc/temp/genomes_v{version}/gnomad_v{version}_RF_pop_assignments.txt.gz"


def pop_rf_path(version: str = CURRENT_RELEASE) -> str:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return f"gs://gnomad/sample_qc/temp/genomes_v{version}/gnomad_v{version}_pop.RF_fit.pickle"


# Hard-filtered samples
def hard_filtered_samples(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_hard_filtered_samples.ht"
    )


# Results of running population-based metrics filtering
# Not used for v3 release (regresed metrics used instead)
def stratified_metrics(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_stratified_metrics.ht"
    )


# Results of running regressed metrics filtering
def regressed_metrics(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_regressed_metrics.ht"
    )


# Ranking of all samples based on quality metrics. Used to remove relateds for PCA.
def pca_samples_rankings(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_pca_samples_ranking.ht"
    )


# Ranking of all release samples based on quality metrics. Used to remove relateds for release.
def release_samples_rankings(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_release_samples_ranking.ht"
    )


# Picard metrics
def picard_metrics(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_picard_metrics.ht"
    )


# Duplicated (or twin) samples
def duplicates(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad_v{version}_duplicates.ht"
    )


# v2 samples overlap
def v3_v2_pc_relate_pca_scores(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad__v2_v{version}_release_pca_scores.ht"
    )


def v3_v2_relatedness(version: str = CURRENT_RELEASE) -> TableResource:
    """


    :param version: Version of sample QC path to return
    :return:
    """
    return TableResource(
        f"{get_sample_qc_root(version)}/gnomad__v2_v{version}_release_relatedness.ht"
    )
